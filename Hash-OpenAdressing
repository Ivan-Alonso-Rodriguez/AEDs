#include <iostream>
#include <vector>
#include <string>

using namespace std;

class HashEntry {
public:
    string key;
    string value;
    bool isDeleted;

    HashEntry() : key(""), value(""), isDeleted(false) {}
    HashEntry(string k, string v) : key(k), value(v), isDeleted(false) {}
};

class HashTableOpenAddressing {
private:
    vector<HashEntry> table;
    int capacity;
    int size;

    int hashFunction(const string& key) {
        int hash = 0;
        for (char ch : key) {
            hash += ch;
        }
        return hash % capacity;
    }

public:
    HashTableOpenAddressing(int cap) : capacity(cap), size(0), table(cap) {}

    void insert(const string& key, const string& value) {
        int index = hashFunction(key);
        int originalIndex = index;
        while (!table[index].key.empty() && !table[index].isDeleted) {
            if (table[index].key == key) {
                table[index].value = value;
                return;
            }
            index = (index + 1) % capacity;
            if (index == originalIndex) {
                cout << "Hash table is full!" << endl;
                return;
            }
        }
        table[index] = HashEntry(key, value);
        size++;
    }

    void remove(const string& key) {
        int index = hashFunction(key);
        int originalIndex = index;
        while (!table[index].key.empty()) {
            if (table[index].key == key && !table[index].isDeleted) {
                table[index].isDeleted = true;
                size--;
                return;
            }
            index = (index + 1) % capacity;
            if (index == originalIndex) break;
        }
    }

    string search(const string& key) {
        int index = hashFunction(key);
        int originalIndex = index;
        while (!table[index].key.empty()) {
            if (table[index].key == key && !table[index].isDeleted) {
                return table[index].value;
            }
            index = (index + 1) % capacity;
            if (index == originalIndex) break;
        }
        return ""; // Not found
    }

    void display() {
        for (int i = 0; i < capacity; ++i) {
            if (!table[i].key.empty() && !table[i].isDeleted)
                cout << "Index " << i << ": (" << table[i].key << ": " << table[i].value << ")" << endl;
            else
                cout << "Index " << i << ": empty" << endl;
        }
    }
};
