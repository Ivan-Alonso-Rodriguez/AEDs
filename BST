#include <iostream>
#include <vector>
#include <queue>

using namespace std;

// Definición del nodo del árbol
struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

// Inserta un valor en el BST
Node* insert(Node* root, int value) {
    if (root == nullptr) return new Node(value);

    if (value < root->data)
        root->left = insert(root->left, value);
    else if (value > root->data)
        root->right = insert(root->right, value);

    return root;
}

// Busca un valor en el BST
bool search(Node* root, int value) {
    if (root == nullptr) return false;

    if (root->data == value) return true;
    else if (value < root->data) return search(root->left, value);
    else return search(root->right, value);
}

// Recorrido inorden (izquierda, raíz, derecha)
void inorder(Node* root) {
    if (root != nullptr) {
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }
}

// Recorrido preorden (raíz, izquierda, derecha)
void preorder(Node* root) {
    if (root != nullptr) {
        cout << root->data << " ";
        preorder(root->left);
        preorder(root->right);
    }
}

// Recorrido postorden (izquierda, derecha, raíz)
void postorder(Node* root) {
    if (root != nullptr) {
        postorder(root->left);
        postorder(root->right);
        cout << root->data << " ";
    }
}

// Recorrido por niveles (BFS)
void levelOrder(Node* root) {
    if (root == nullptr) return;

    queue<Node*> q;
    q.push(root);

    while (!q.empty()) {
        Node* current = q.front();
        q.pop();
        cout << current->data << " ";

        if (current->left) q.push(current->left);
        if (current->right) q.push(current->right);
    }
}
// Elimina un nodo con un valor específico del BST
Node* deleteNode(Node* root, int key) {
    if (root == nullptr) return nullptr;

    if (key < root->data) {
        root->left = deleteNode(root->left, key);
    } else if (key > root->data) {
        root->right = deleteNode(root->right, key);
    } else {
        // Caso 1: Sin hijos (hoja)
        if (root->left == nullptr && root->right == nullptr) {
            delete root;
            return nullptr;
        }
        // Caso 2: Un solo hijo
        else if (root->left == nullptr) {
            Node* temp = root->right;
            delete root;
            return temp;
        }
        else if (root->right == nullptr) {
            Node* temp = root->left;
            delete root;
            return temp;
        }
        // Caso 3: Dos hijos
        else {
            // Encontrar el sucesor inorden (mínimo en el subárbol derecho)
            Node* successor = root->right;
            while (successor->left != nullptr) {
                successor = successor->left;
            }

            // Reemplazar el valor del nodo actual con el del sucesor
            root->data = successor->data;

            // Eliminar el sucesor
            root->right = deleteNode(root->right, successor->data);
        }
    }

    return root;
}

// Inorden que llena un vector con los datos
void inorderTraversal(Node* root, vector<int>& result) {
    if (root == nullptr) return;

    inorderTraversal(root->left, result);
    result.push_back(root->data);
    inorderTraversal(root->right, result);
}
int main() {
    Node* root = nullptr;
    vector<int> inordenVec;

    // Insertar nodos
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 70);
    insert(root, 20);
    insert(root, 40);
    insert(root, 60);
    insert(root, 80);

    cout << "Inorden: ";
    inorder(root);
    cout << "\nPreorden: ";
    preorder(root);
    cout << "\nPostorden: ";
    postorder(root);
    cout << "\nLevel Order: ";
    levelOrder(root);

    cout << "\n\nLlenar vector con inorden: ";
    inorderTraversal(root, inordenVec);
    for (int val : inordenVec) {
        cout << val << " ";
    }

    cout << "\nBuscar 40: " << (search(root, 40) ? "Sí" : "No") << endl;
    cout << "Buscar 100: " << (search(root, 100) ? "Sí" : "No") << endl;

    return 0;
}
